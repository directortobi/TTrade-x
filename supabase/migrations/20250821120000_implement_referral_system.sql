/*
  # [Implement Referral System]
  This migration sets up the complete database structure for a referral system. It adds the ability to track who referred whom, log commission earnings from token purchases, and manage withdrawal requests for those earnings.

  ## Query Description: [This script adds new tables and modifies existing ones to support the referral program. No existing data will be deleted, but it structurally prepares the database for new referral features. It is safe to run on an existing database.]

  ## Metadata:
  - Schema-Category: "Structural"
  - Impact-Level: "Low"
  - Requires-Backup: false
  - Reversible: true (with a corresponding down migration)

  ## Structure Details:
  - Adds `referrer_id` column to `profiles` table to link a user to their referrer.
  - Creates `referral_earnings` table to log each commission earned.
  - Creates `referral_withdrawals` table to track user requests to withdraw their earnings.
  - Updates the `handle_new_user` trigger to correctly attribute a new user to their referrer.
  - Creates the `handle_purchase_approval` database function to atomically process token purchases and referral commissions.

  ## Security Implications:
  - RLS Status: Enabled on new tables.
  - Policy Changes: New RLS policies are created for `referral_earnings` and `referral_withdrawals` to ensure users can only see their own data.
  - Auth Requirements: Standard user authentication is required to interact with these tables.

  ## Performance Impact:
  - Indexes: Adds indexes on foreign keys (`referrer_id`, `user_id`) for efficient querying.
  - Triggers: Modifies the `handle_new_user` trigger.
  - Estimated Impact: Low. The changes are additive and indexed.
*/

-- Step 1: Add referrer tracking to the profiles table
ALTER TABLE public.profiles
ADD COLUMN referrer_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL;

CREATE INDEX idx_profiles_referrer_id ON public.profiles(referrer_id);
CREATE INDEX idx_profiles_referral_code ON public.profiles(referral_code);

-- Step 2: Create a table to log referral earnings
CREATE TABLE public.referral_earnings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    referrer_id UUID NOT NULL REFERENCES public.profiles(id),
    referred_user_id UUID NOT NULL REFERENCES public.profiles(id),
    purchase_id UUID NOT NULL REFERENCES public.token_purchases(id),
    purchase_amount NUMERIC(10, 2) NOT NULL,
    commission_amount NUMERIC(10, 2) NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending' -- pending, approved, rejected
);
ALTER TABLE public.referral_earnings ENABLE ROW LEVEL SECURITY;
CREATE INDEX idx_referral_earnings_referrer_id ON public.referral_earnings(referrer_id);

-- Step 3: Create a table to manage withdrawal requests for referral earnings
CREATE TABLE public.referral_withdrawals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    user_id UUID NOT NULL REFERENCES public.profiles(id),
    amount_usd NUMERIC(10, 2) NOT NULL,
    wallet_address TEXT NOT NULL,
    status TEXT NOT NULL DEFAULT 'pending' -- pending, approved, rejected
);
ALTER TABLE public.referral_withdrawals ENABLE ROW LEVEL SECURITY;
CREATE INDEX idx_referral_withdrawals_user_id ON public.referral_withdrawals(user_id);

-- Step 4: Add RLS Policies for the new tables
CREATE POLICY "Users can view their own referral earnings"
ON public.referral_earnings FOR SELECT
USING (auth.uid() = referrer_id);

CREATE POLICY "Users can view their own referral withdrawals"
ON public.referral_withdrawals FOR SELECT
USING (auth.uid() = user_id);

CREATE POLICY "Users can create their own referral withdrawal requests"
ON public.referral_withdrawals FOR INSERT
WITH CHECK (auth.uid() = user_id);


-- Step 5: Update the user creation trigger to link referrals
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  v_referral_code TEXT;
  v_referred_by_code TEXT;
  v_referrer_id UUID;
BEGIN
  -- Generate a unique referral code
  LOOP
    v_referral_code := 'REF-' || upper(substring(md5(random()::text), 1, 8));
    EXIT WHEN NOT EXISTS (SELECT 1 FROM public.profiles WHERE referral_code = v_referral_code);
  END LOOP;

  -- Check for a referrer code from the signup metadata
  v_referred_by_code := new.raw_user_meta_data->>'referred_by';
  v_referrer_id := NULL;

  IF v_referred_by_code IS NOT NULL THEN
    -- Find the referrer's ID, ensuring it's not the new user themselves
    SELECT id INTO v_referrer_id
    FROM public.profiles
    WHERE referral_code = v_referred_by_code AND id != new.id;
  END IF;

  -- Insert into public.profiles
  INSERT INTO public.profiles (id, email, referral_code, referrer_id)
  VALUES (
    new.id,
    new.email,
    v_referral_code,
    v_referrer_id
  );
  
  RETURN new;
END;
$$;


-- Step 6: Create the transactional function for handling purchase approvals and commissions
CREATE OR REPLACE FUNCTION public.handle_purchase_approval(p_purchase_id UUID)
RETURNS void
LANGUAGE plpgsql
AS $$
DECLARE
  v_purchase RECORD;
  v_referrer_id UUID;
  v_commission_amount NUMERIC;
  v_commission_rate NUMERIC := 0.20; -- 20% commission
BEGIN
  -- Step 1: Get purchase details and lock the row
  SELECT * INTO v_purchase
  FROM public.token_purchases
  WHERE id = p_purchase_id AND status = 'pending'
  FOR UPDATE;

  IF NOT FOUND THEN
    RAISE EXCEPTION 'Purchase not found or not pending';
  END IF;

  -- Step 2: Update the user's token balance
  UPDATE public.profiles
  SET tokens = tokens + v_purchase.tokens_purchased
  WHERE id = v_purchase.user_id;

  -- Step 3: Update the purchase status to 'approved'
  UPDATE public.token_purchases
  SET status = 'approved'
  WHERE id = p_purchase_id;

  -- Step 4: Check if the user was referred and handle commission
  SELECT referrer_id INTO v_referrer_id
  FROM public.profiles
  WHERE id = v_purchase.user_id;

  IF v_referrer_id IS NOT NULL THEN
    -- Calculate commission based on the USD price of the purchase
    v_commission_amount := v_purchase.price_usd * v_commission_rate;

    -- Insert a record into the referral_earnings table
    INSERT INTO public.referral_earnings (referrer_id, referred_user_id, purchase_id, purchase_amount, commission_amount, status)
    VALUES (
      v_referrer_id,
      v_purchase.user_id,
      v_purchase.id,
      v_purchase.price_usd,
      v_commission_amount,
      'approved' -- Commission is approved immediately with the purchase
    );
  END IF;
END;
$$;
